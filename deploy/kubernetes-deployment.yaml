---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment # Name of the deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-pod # The deployment will target pods with this name
  template:
    metadata:
      labels:
        app: gateway-pod # Name of the pods
    spec:
      containers:
        - name: gateway-container # Name we want to give the container
          image: ghcr.io/iagonyii/gateway:latest # Remote Docker image
          ports:
            - containerPort: 80 # Expose the port that the service/app runs on
          imagePullPolicy: Always
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Production"
      imagePullSecrets: # Token secret for pulling private Docker image from GitHub
        - name: dockerconfigjson-github-com

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: scanservice-deployment # Name of the deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scanservice-pod # The deployment will target pods with this name
  template:
    metadata:
      labels:
        app: scanservice-pod # Name of the pods
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "scanservice"
        dapr.io/app-port: "80"
    spec:
      containers:
        - name: scanservice-container # Name we want to give the container
          image: ghcr.io/iagonyii/scanservice:latest # Remote Docker image
          ports:
            - containerPort: 80 # Expose the port that the service/app runs on
          imagePullPolicy: Always
          env:
            - name: COSMOS_DB_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: cosmos-db-master-key # Kubernetes secret
                  key: cosmos-db-master-key
      imagePullSecrets: # Token secret for pulling private Docker image from GitHub
        - name: dockerconfigjson-github-com

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: userservice-deployment # Name of the deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: userservice-pod # The deployment will target pods with this name
  template:
    metadata:
      labels:
        app: userservice-pod # Name of the pods
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "userservice"
        dapr.io/app-port: "80"
    spec:
      containers:
        - name: userservice-container # Name we want to give the container
          image: ghcr.io/iagonyii/userservice:latest # Remote Docker image
          ports:
            - containerPort: 80 # Expose the port that the service/app runs on
          imagePullPolicy: Always
          env:
            - name: COSMOS_DB_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: cosmos-db-master-key # Kubernetes secret
                  key: cosmos-db-master-key
      imagePullSecrets: # Token secret for pulling private Docker image from GitHub
        - name: dockerconfigjson-github-com
        
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: reportservice-deployment # Name of the deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reportservice-pod # The deployment will target pods with this name
  template:
    metadata:
      labels:
        app: reportservice-pod # Name of the pods
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "reportservice"
        dapr.io/app-port: "80"
    spec:
      containers:
        - name: reportservice-container # Name we want to give the container
          image: ghcr.io/iagonyii/reportservice:latest # Remote Docker image
          ports:
            - containerPort: 80 # Expose the port that the service/app runs on
          imagePullPolicy: Always
          env:
            - name: COSMOS_DB_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: cosmos-db-master-key # Kubernetes secret
                  key: cosmos-db-master-key
      imagePullSecrets: # Token secret for pulling private Docker image from GitHub
        - name: dockerconfigjson-github-com

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: runner-deployment # Name of the deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: runner-pod # The deployment will target pods with this name
  template:
    metadata:
      labels:
        app: runner-pod # Name of the pods
    spec:
      containers:
        - name: runner-container # Name we want to give the container
          image: ghcr.io/iagonyii/runner:latest # Remote Docker image
          ports:
            - containerPort: 50051 # Expose the port that the service/app runs on
          imagePullPolicy: Always
      imagePullSecrets: # Token secret for pulling private Docker image from GitHub
        - name: dockerconfigjson-github-com

---

kind: Service
apiVersion: v1
metadata:
  annotations:
    service.beta.kubernetes.io/azure-dns-label-name: webappsafegw
  name: gateway-service # Name of the service
spec:
  selector:
    app: gateway-pod # Send traffic to pods with this label
  ports:
    - name: http-scan
      port: 80 # Port that we want to reach the service running on the pods on
      targetPort: 80 # Port that the running service exposes within the container
  type: LoadBalancer

---

kind: Service
apiVersion: v1
metadata:
  name: scanservice-service # Name of the service
spec:
  selector:
    app: scanservice-pod # Send traffic to pods with this label
  ports:
    - name: http-scan
      port: 7001 # Port that we want to reach the service running on the pods on
      targetPort: 80 # Port that the running service exposes within the container
  type: ClusterIP

---

kind: Service
apiVersion: v1
metadata:
  name: userservice-service # Name of the service
spec:
  selector:
    app: userservice-pod # Send traffic to pods with this label
  ports:
    - name: http-user
      port: 7002 # Port that we want to reach the service running on the pods on
      targetPort: 80 # Port that the running service exposes within the container
  type: ClusterIP
  
---

kind: Service
apiVersion: v1
metadata:
  name: reportservice-service # Name of the service
spec:
  selector:
    app: reportservice-pod # Send traffic to pods with this label
  ports:
    - name: http-report
      port: 7003 # Port that we want to reach the service running on the pods on
      targetPort: 80 # Port that the running service exposes within the container
  type: ClusterIP
